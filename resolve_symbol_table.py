import struct
import argparse

# Setup arguments
parser = argparse.ArgumentParser(description='Reorder string table from symbol table offsets.')
parser.add_argument('-s', dest='sym_path', help='File path to symbol table dump file.', required=True)
parser.add_argument('-t', dest='str_path', help='File path to string table dumpt file.', required=True)
parser.add_argument('-p', dest='plt_path', help='File path to plt table dumpt file.', required=True)

# Parse out arguments
args = parser.parse_args()
# ssh_ip = args.ssh_ip
# global_protect_ip = args.global_protect_ip
# password = args.ssh_pw

# struct Elf64_Sym
# {
#   Elf64_Word    st_name;   /* 4 Symbol name (string tbl index) */
#   unsigned char st_info;   /* 1 Symbol type and binding */
#   unsigned char st_other;  /* 1 Symbol visibility */
#   Elf64_Section st_shndx;  /* 2 Section index */
#   Elf64_Addr    st_value;  /* 8 Symbol value */
#   Elf64_Xword   st_size;   /* 8 Symbol size */
# };

# Open symbol table dump
sym_path = args.sym_path
f = open(sym_path, 'rb')
table_lookup_bin = f.read()
f.close()

# Open string table dump
str_path = args.str_path
f = open(str_path, 'rb')
func_str = f.read()
f.close()

# Open plt table dump
image_base = 0x400000   # !!! change me 
# plt table offest in dump memory 
plt_offest = 0x0069f0   # !!! change me
# image_base = 0
# plt_offest = 0x2d30
# plt_offest = 0x00000000002F5C0
plt_path = args.plt_path
f = open(plt_path, 'rb')
func_plt = f.read()
f.close()

sym_marker = 0
plt_marker = 0x10
print("plt_addr\tgot_addr\tfunc_name")
while sym_marker < len(table_lookup_bin):
    offset = table_lookup_bin[sym_marker:sym_marker+4]
    idx = struct.unpack("<I", offset)[0]
    st_shndx = table_lookup_bin[sym_marker+6:sym_marker+8]
    section_index = struct.unpack("<H", st_shndx)[0]
    st_info = table_lookup_bin[sym_marker+4:sym_marker+5]
    st_info_n = struct.unpack("<b", st_info)[0]
    binding = st_info_n >> 4
    sym_type = st_info_n & 0xf

    # print(offset)
    #print "String Table Offset: %s" % hex(idx)
    if idx > 0 and binding != 2 and sym_type == 2:
        cropped_buf = func_str[idx:]
        #print cropped_buf
        z_idx = cropped_buf.find("\x00")
        #print "Zero Offset: %s" % hex(z_idx)
        if z_idx != -1:
            func = cropped_buf[:z_idx]
        else:
            func = ''
        if plt_marker >= len(func_plt):
            plt_addr = 0xffffff
            got_addr = 0xffffff
        else:
            plt_addr = image_base + plt_offest + plt_marker
            jmp_addr = func_plt[plt_marker+2:plt_marker+6]
            jmp_addr = struct.unpack("<I", jmp_addr)[0] 
            got_addr = jmp_addr + plt_addr + 6
        print hex(plt_addr),'\t',hex(got_addr),'\t',func, '\t', section_index
        plt_marker += 0x10

    sym_marker += 24
    #raw_input()